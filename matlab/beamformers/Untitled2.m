%MATLAB Code from Sensor Array Analyzer App

%Generated by MATLAB 9.2 and Phased Array System Toolbox 3.4

%Generated on 27-May-2017 15:37:44

% Create a uniform circular array
h = phased.UCA;
h.NumElements = 16;
h.Radius = 0.21664;
h.ArrayNormal = 'z';
%Calculate Taper
wind = ones(1,16);
h.Taper = wind;
%Create Isotropic Antenna Element
el = phased.IsotropicAntennaElement;
h.Element = el;
%Assign steering angles, frequencies and propagation speed
SA = [0;0];
%Assign number of phase shift quantization bits
PSB = 0;
F = 4000;
PS = 340;
%Create figure, panel, and axes
fig = figure;
subplot(2, 2, 1)
panel = uipanel('Parent',fig, 'BackgroundColor', 'w', 'BorderType', 'none');
hAxes = axes('Parent',panel,'Color','none');
NumCurves = length(F);
%Calculate Steering Weights
w = zeros(getDOF(h), NumCurves);
for idx = 1:length(F)
    SV = phased.SteeringVector('SensorArray',h, 'PropagationSpeed', PS, ...
        'NumPhaseShifterBits', PSB(idx));
    w(:, idx) = step(SV, F(idx), SA(:, idx));
end
%Plot 2d graph
fmt = 'polar';
cutAngle = 0;
pattern(h, F, -180:180, cutAngle, 'PropagationSpeed', PS, 'Type', ...
    'directivity', 'CoordinateSystem', fmt ,'weights', w);
%Create legend
legend_string = cell(1,NumCurves);
lines = findobj(gca,'Type','line');
for idx = 1:NumCurves
    [Fval, ~, Fletter] = engunits(F(idx));
    if size(SA, 2) == 1
        az_str = num2str(SA(1,1));
        elev_str = num2str(SA(2,1));
    else
        az_str = num2str(SA(1, idx));
        elev_str = num2str(SA(2, idx));
    end
    if PSB(idx)>0
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El' ';' ...
            num2str(PSB(idx)) '-bit Quantized'];
    else
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El'];
    end
end
legend(legend_string, 'Location', 'southeast');

subplot(2, 2, 2)
h = phased.UCA;
h.NumElements = 16;
h.Radius = 0.21664;
h.ArrayNormal = 'z';
%Calculate Taper
wind = ones(1,16);
h.Taper = wind;
%Create Isotropic Antenna Element
el = phased.IsotropicAntennaElement;
h.Element = el;
%Assign steering angles, frequencies and propagation speed
SA = [30;0];
%Assign number of phase shift quantization bits
PSB = 0;
F = 4000;
PS = 340;
%Create figure, panel, and axes
NumCurves = length(F);
%Calculate Steering Weights
w = zeros(getDOF(h), NumCurves);
for idx = 1:length(F)
    SV = phased.SteeringVector('SensorArray',h, 'PropagationSpeed', PS, ...
        'NumPhaseShifterBits', PSB(idx));
    w(:, idx) = step(SV, F(idx), SA(:, idx));
end
%Plot 2d graph
fmt = 'polar';
cutAngle = 0;
pattern(h, F, -180:180, cutAngle, 'PropagationSpeed', PS, 'Type', ...
    'directivity', 'CoordinateSystem', fmt ,'weights', w);
%Create legend
legend_string = cell(1,NumCurves);
lines = findobj(gca,'Type','line');
for idx = 1:NumCurves
    [Fval, ~, Fletter] = engunits(F(idx));
    if size(SA, 2) == 1
        az_str = num2str(SA(1,1));
        elev_str = num2str(SA(2,1));
    else
        az_str = num2str(SA(1, idx));
        elev_str = num2str(SA(2, idx));
    end
    if PSB(idx)>0
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El' ';' ...
            num2str(PSB(idx)) '-bit Quantized'];
    else
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El'];
    end
end
legend(legend_string, 'Location', 'southeast');

subplot(2, 2, 4)
h = phased.UCA;
h.NumElements = 16;
h.Radius = 0.21664;
h.ArrayNormal = 'z';
%Calculate Taper
wind = ones(1,16);
h.Taper = wind;
%Create Isotropic Antenna Element
el = phased.IsotropicAntennaElement;
h.Element = el;
%Assign steering angles, frequencies and propagation speed
SA = [90;0];
%Assign number of phase shift quantization bits
PSB = 0;
F = 4000;
PS = 340;
%Create figure, panel, and axes
NumCurves = length(F);
%Calculate Steering Weights
w = zeros(getDOF(h), NumCurves);
for idx = 1:length(F)
    SV = phased.SteeringVector('SensorArray',h, 'PropagationSpeed', PS, ...
        'NumPhaseShifterBits', PSB(idx));
    w(:, idx) = step(SV, F(idx), SA(:, idx));
end
%Plot 2d graph
fmt = 'polar';
cutAngle = 0;
pattern(h, F, -180:180, cutAngle, 'PropagationSpeed', PS, 'Type', ...
    'directivity', 'CoordinateSystem', fmt ,'weights', w);
%Create legend
legend_string = cell(1,NumCurves);
lines = findobj(gca,'Type','line');
for idx = 1:NumCurves
    [Fval, ~, Fletter] = engunits(F(idx));
    if size(SA, 2) == 1
        az_str = num2str(SA(1,1));
        elev_str = num2str(SA(2,1));
    else
        az_str = num2str(SA(1, idx));
        elev_str = num2str(SA(2, idx));
    end
    if PSB(idx)>0
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El' ';' ...
            num2str(PSB(idx)) '-bit Quantized'];
    else
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El'];
    end
end
legend(legend_string, 'Location', 'southeast');


subplot(2, 2, 3)
h = phased.UCA;
h.NumElements = 16;
h.Radius = 0.21664;
h.ArrayNormal = 'z';
%Calculate Taper
wind = ones(1,16);
h.Taper = wind;
%Create Isotropic Antenna Element
el = phased.IsotropicAntennaElement;
h.Element = el;
%Assign steering angles, frequencies and propagation speed
SA = [60;0];
%Assign number of phase shift quantization bits
PSB = 0;
F = 4000;
PS = 340;
%Create figure, panel, and axes
NumCurves = length(F);
%Calculate Steering Weights
w = zeros(getDOF(h), NumCurves);
for idx = 1:length(F)
    SV = phased.SteeringVector('SensorArray',h, 'PropagationSpeed', PS, ...
        'NumPhaseShifterBits', PSB(idx));
    w(:, idx) = step(SV, F(idx), SA(:, idx));
end
%Plot 2d graph
fmt = 'polar';
cutAngle = 0;
pattern(h, F, -180:180, cutAngle, 'PropagationSpeed', PS, 'Type', ...
    'directivity', 'CoordinateSystem', fmt ,'weights', w);
%Create legend
legend_string = cell(1,NumCurves);
lines = findobj(gca,'Type','line');
for idx = 1:NumCurves
    [Fval, ~, Fletter] = engunits(F(idx));
    if size(SA, 2) == 1
        az_str = num2str(SA(1,1));
        elev_str = num2str(SA(2,1));
    else
        az_str = num2str(SA(1, idx));
        elev_str = num2str(SA(2, idx));
    end
    if PSB(idx)>0
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El' ';' ...
            num2str(PSB(idx)) '-bit Quantized'];
    else
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El'];
    end
end
legend(legend_string, 'Location', 'southeast');



subplot(2, 2, 1)
h = phased.UCA;
h.NumElements = 16;
h.Radius = 0.21664;
h.ArrayNormal = 'z';
%Calculate Taper
wind = ones(1,16);
h.Taper = wind;
%Create Isotropic Antenna Element
el = phased.IsotropicAntennaElement;
h.Element = el;
%Assign steering angles, frequencies and propagation speed
SA = [0;0];
%Assign number of phase shift quantization bits
PSB = 0;
F = 4000;
PS = 340;
%Create figure, panel, and axes
NumCurves = length(F);
%Calculate Steering Weights
w = zeros(getDOF(h), NumCurves);
for idx = 1:length(F)
    SV = phased.SteeringVector('SensorArray',h, 'PropagationSpeed', PS, ...
        'NumPhaseShifterBits', PSB(idx));
    w(:, idx) = step(SV, F(idx), SA(:, idx));
end
%Plot 2d graph
fmt = 'polar';
cutAngle = 0;
pattern(h, F, -180:180, cutAngle, 'PropagationSpeed', PS, 'Type', ...
    'directivity', 'CoordinateSystem', fmt ,'weights', w);
%Create legend
legend_string = cell(1,NumCurves);
lines = findobj(gca,'Type','line');
for idx = 1:NumCurves
    [Fval, ~, Fletter] = engunits(F(idx));
    if size(SA, 2) == 1
        az_str = num2str(SA(1,1));
        elev_str = num2str(SA(2,1));
    else
        az_str = num2str(SA(1, idx));
        elev_str = num2str(SA(2, idx));
    end
    if PSB(idx)>0
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El' ';' ...
            num2str(PSB(idx)) '-bit Quantized'];
    else
        legend_string{idx} = [num2str(Fval) Fletter 'Hz;' num2str(SA(1, ...
            idx)) 'Az' ' ' elev_str 'El'];
    end
end
legend(legend_string, 'Location', 'southeast');